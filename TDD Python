#Tabela de Códigos de Status HTTP

#100	Continue	O cliente pode continuar com a requisição.

#200	OK	Requisição bem-sucedida.

#201	Created	Recurso criado com sucesso (ex: POST)

#204	No Content	Requisição bem-sucedida, mas sem conteúdo para retornar.

#404	Not Found	Recurso não encontrado.

import requests
import unittest
from app import app

class TestStringMethods(unittest.TestCase):
    
    def teste_000_verifica_se_a_rota_professores_existe(self):
        resultado=requests.get('http://localhost:5000/professores')
        
        if resultado.status_code == 404:
            self.fail("Voce não definiu a rota ou digitou a rota errado")

        self.assertEqual(resultado.status_code, 200, "A rota professor  nao esta respondendo como deveria") #assertEqual verifica se dois valores são iguais. No nosso caso se a API esta retornando 200 valor correto, Se não forem, ele quebra o teste e mostra a mensagem de erro.
            
    
    def teste_001_adiciona_professor_POST(self):
        r = requests.post('http://localhost:5000/professores',json= {
            "id": 10,
            "nome": "Nicolas",
            "idade": "30",
            "materia": "Portugues",
            "observacoes": ""
            
  })
        r_lista =requests.get('http://localhost:5000/professores') #fazendo um GET na rota professores para ver se o professor foi adicionado corretamente
        lista_retorna = r_lista.json()
        
        achei_Nicolas = False
        for professor in lista_retorna:
            if professor['nome'] == 'Nicolas':
                achei_Nicolas = True

        if not achei_Nicolas:
            self.fail('O professor Nicolas nao foi adicionado na lista de professores')

#    def teste_002_reseta_alunos(self):
#        r = requests.post('http://localhost:5000/alunos', json={
#            "id": 11,
#            "nome": "Nicolas",
#            "data_de_nascimento": "14_10_2004",
#            "turma_id": 1,
#            "nota_primeiro_semestre": 10,
#            "nota_segundo_semestre": 10,
#            })
#     
#         r_lista = requests.get('http://localhost:5000/alunos') 
#         self.assertTrue(len(r_lista.json()) > 0)           #e a condição len(Aluno criado no POST) > 0 for verdadeira, o teste passa. Se for falsa, o teste falha.
         
#         r_reseta = requests.post('http://localhost:5000/reseta') #reseta nome da ROTA MUDAR AMANHA 
#         self.assertEqual(r_reseta.status_code,200)
         
#         r_lista_depois = requests.get('http://localhost:5000/alunos')
#         self.assertEqual(len(r_lista_depois.json()),0)
         
    def teste_003_delete_professor(self): 
        reseta_lista = requests.post('http://localhost:5000/reseta')  #O Professor continua armazenado dos outros testes por isso esta limpando tudo
        self.assertEqual(reseta_lista.status_code, 200, "A rota reseta não retornou o status 200. Verifique se ela está implementada corretamente.")

        r_cria = requests.post('http://localhost:5000/professores', json={  
            "id": 12,
            "nome": "Samuel",
            "idade": "27",
            "materia": "matemática",
            "observacoes": ""
        })
        self.assertEqual(r_cria.status_code, 201, "A rota POST professores não retornou 201 como esperado. Verifique se foi criado corretamente")

        requests.delete('http://localhost:5000/professores/12')

        retorno_lista = requests.get('http://localhost:5000/professores')
        lista_retornada = retorno_lista.json()
        
        acheiSamuel = any(professor['nome'] == 'Samuel' for professor in lista_retornada) #O any é uma função do Python que retorna True se pelo menos um item de um iterável (como uma lista ou um for) for True

        if acheiSamuel: # Se o *ANY* aparecer true entra esse if
            self.fail("O professor Samuel ainda está na lista. O delete nao funcionou")

    def teste_004_editar_professor(self):
        reseta_lista = requests.post('http://localhost:5000/reseta')
        self.assertEqual(reseta_lista.status_code,200)
        
        requests.post('http://localhost:5000/professores', json={  
            "id": 13,
            "nome": "Matheus",
            "idade": "30",
            "materia": "Portugues",
            "observacoes": ""
            })   

        lista_antiga = requests.get('http://localhost:5000/professores/13')
        self.assertEqual(lista_antiga.json()['nome'],'Matheus')
         
        requests.put('http://localhost:5000/professores/13', json={  
            "id": 13,
            "nome": "Octavio",
            "idade": "30",
            "materia": "Portugues",
            "observacoes": ""      
            })  
         
        lista_depois = requests.get('http://localhost:5000/professores/13')
        self.assertEqual(lista_depois.json()['nome'],'Octavio')
        self.assertEqual(lista_depois.json()['id'],13)

    def teste_005_id_nao_existe_no_put(self):
        reseta_lista = requests.post('http://localhost:5000/reseta')
        self.assertEqual(reseta_lista.status_code, 200)

        r = requests.put('http://localhost:5000/professores/1', json={'nome': 'MINEIRO', 'id': 1})
        self.assertIn(r.status_code, [400, 404])

        resposta = r.json()
        self.assertIn('erro', resposta)
        self.assertEqual(resposta['erro'], 'Professor não encontrado')

    def teste_006_id_nao_existe_no_get(self):
        reseta_lista = requests.post('http://localhost:5000/reseta')
        self.assertEqual(reseta_lista.status_code, 200)

        r = requests.get('http://localhost:5000/professores/1')
        self.assertIn(r.status_code, [400, 404])

        resposta = r.json()
        self.assertIn('erro', resposta)
        self.assertEqual(resposta['erro'], 'Professor não encontrado')

    def teste_007_id_nao_existe_no_delete(self):
        reseta_lista = requests.post('http://localhost:5000/reseta')
        self.assertEqual(reseta_lista.status_code, 200)

        r = requests.delete('http://localhost:5000/professores/15')
        self.assertIn(r.status_code, [400, 404])

        resposta = r.json()
        self.assertIn('erro', resposta)
        self.assertEqual(resposta['erro'], 'Professor não encontrado')


    def teste_008_criar_com_id_ja_existente(self):
        reseta_lista = requests.post('http://localhost:5000/reseta')
        self.assertEqual(reseta_lista.status_code,200)
        
        r = requests.post('http://localhost:5000/professores', json={  
            "id": 100,
            "nome": "Gabriel Martins",
            "idade": "31",
            "materia": "Portugues",
            "observacoes": ""
            })  
        
        r = requests.post('http://localhost:5000/professores', json={  
            "id": 100,
            "nome": "Gabriel Martins",
            "idade": "31",
            "materia": "Portugues",
            "observacoes": ""
            })  
        self.assertEqual(r.status_code,400)

    def teste_009_put_sem_o_nome(self):
        reseta_lista = requests.post('http://localhost:5000/reseta')
        self.assertEqual(reseta_lista.status_code, 200)

        resposta_create = requests.post('http://localhost:5000/professores', json={  
            "id": 47,
            "nome": "Gabriel Martins",
            "idade": "31",
            "materia": "Portugues",
            "observacoes": ""  
        })
        self.assertEqual(resposta_create.status_code, 201)

        resposta_update = requests.put('http://localhost:5000/professores/47', json={  
            "id": 47,
            "idade": "31",
            "materia": "Portugues",
            "observacoes": ""
        })
        
        self.assertIn(resposta_update.status_code, [400, 422])  # código de erro esperado
        resposta = resposta_update.json()
        self.assertIn('erro', resposta)
        self.assertEqual(resposta['erro'], 'Preencha o nome novamente')
  
    def teste_010_post_sem_nome(self):
        reseta_lista = requests.post('http://localhost:5000/reseta')
        self.assertEqual(reseta_lista.status_code,200)

        resposta = requests.post('http://localhost:5000/professores', json={  
            "id": 100,
            "idade": "31",
            "materia": "Portugues",
            "observacoes": ""
            })
        self.assertEqual(resposta.status_code,400)

    def teste_011_professor_sem_idade_post(self):
        reseta_lista = requests.post('http://localhost:5000/reseta')
        self.assertEqual(reseta_lista.status_code, 200)

        resultado = requests.post('http://localhost:5000/professores', json={  
            "id": 99,
            "nome": "Gabriel Martins",
            "materia": "Portugues",
            "observacoes": "",
        })

        self.assertEqual(resultado.status_code, 400)
        resposta = resultado.json()
        self.assertIn("erro", resposta)
        self.assertEqual(resposta["erro"], 'idade é obrigatória')


    def teste_012_professor_sem_idade_put(self):
        reseta_lista = requests.post('http://localhost:5000/reseta')
        self.assertEqual(reseta_lista.status_code, 200)

        resposta_create = requests.post('http://localhost:5000/professores', json={  
            "id": 5,
            "nome": "Gabriel Martins",
            "idade": "31",
            "materia": "Portugues",
            "observacoes": "" 
        })
        self.assertEqual(resposta_create.status_code, 201)
        
        resposta_update = requests.put('http://localhost:5000/alunos/5', json={  
            "id": 5,
            "nome": "Gabriel Martins",
            "materia": "Portugues",
            "observacoes": "",  
        })
        
        self.assertEqual(resposta_update.status_code, 400)
        resposta = resposta_update.json()
        self.assertIn('erro', resposta)
        self.assertEqual(resposta['erro'], 'idade é obrigatória')

    def teste_013_post_com_id_negativo(self):
        reseta_lista = requests.post('http://localhost:5000/reseta')
        self.assertEqual(reseta_lista.status_code, 200)
        
        resultado = requests.post('http://localhost:5000/professores', json={  
            "id": -1,
            "nome": "Gabriel Martins",
            "idade": "31",
            "materia": "Portugues",
            "observacoes": ""
        })
        self.assertEqual(resultado.status_code, 400)
        resposta = resultado.json()
        self.assertIn("erro", resposta)
        self.assertEqual(resposta["erro"], 'ID não pode ser negativo')


    def teste_014_post_com_id_nao_inteiro(self):
        reseta_lista = requests.post('http://localhost:5000/reseta')
        self.assertEqual(reseta_lista.status_code, 200)
        
        resultado = requests.post('http://localhost:5000/professores', json={  
            "id": 6.5,
            "nome": "Gabriel Martins",
            "idade": "31",
            "materia": "Portugues",
            "observacoes": ""
        })
        self.assertEqual(resultado.status_code, 400)
        resposta = resultado.json()
        self.assertIn("erro", resposta)
        self.assertEqual(resposta["erro"], "O campo 'id' deve ser um número inteiro")

    def teste_015_post_com_nome_vazio(self):
        reseta_lista = requests.post('http://localhost:5000/reseta')
        self.assertEqual(reseta_lista.status_code, 200)

        resultado = requests.post('http://localhost:5000/professores', json={  
            "id": 7,
            "nome": "", 
            "idade": "31",
            "materia": "Portugues",
            "observacoes": ""
        })

        self.assertEqual(resultado.status_code, 400)
        resposta = resultado.json()
        self.assertIn("erro", resposta)
        self.assertEqual(resposta["erro"], 'Preencha o nome')
    
    def teste_016_put_com_nome_vazio(self):
        reseta_lista = requests.post('http://localhost:5000/reseta')
        self.assertEqual(reseta_lista.status_code, 200)

        # Cria um professor válido
        resposta_create = requests.post('http://localhost:5000/professores', json={  
            "id": 7,
            "nome": "Gabriel Martins",
            "idade": "31",
            "materia": "Portugues",
            "observacoes": ""  
        })
        self.assertEqual(resposta_create.status_code, 201)

        # Tenta atualizar com nome vazio (apenas espaços)
        resposta_update = requests.put('http://localhost:5000/professores/7', json={  
            "id": 7,
            "nome": "",
            "idade": "31",
            "materia": "Portugues",
            "observacoes": ""
        })

        self.assertEqual(resposta_update.status_code, 400)
        resposta = resposta_update.json()
        self.assertIn("erro", resposta)
        self.assertEqual(resposta["erro"], 'Preencha o nome novamente')

    def teste_017_post_com_materia_acima_caracteres_validos(self):
        reseta_lista = requests.post('http://localhost:5000/reseta')
        self.assertEqual(reseta_lista.status_code, 200)
        
        # Matéria com mais de 100 caracteres
        resposta = requests.post('http://localhost:5000/professores', json={
            "id": 7,
            "nome": "caio",
            "idade": "31",
            "materia": "Algoritmos e Programação" * 10,  # 100 caracteres
            "observacoes": ""
        })

        self.assertEqual(resposta.status_code, 400)
        resposta_json = resposta.json()
        self.assertIn("erro", resposta_json)
        self.assertEqual(resposta_json["erro"], 'Matéria não pode ter mais de 100 caracteres')

    def teste_018_put_com_materia_acima_caracteres_validos(self):
        reseta_lista = requests.post('http://localhost:5000/reseta')
        self.assertEqual(reseta_lista.status_code, 200)

        # Primeiro cria um professor válido
        resposta_create = requests.post('http://localhost:5000/professores', json={
            "id": 8,
            "nome": "João Pedro",
            "idade": "30",
            "materia": "Algoritmos e Programação",
            "observacoes": ""
        })
        self.assertEqual(resposta_create.status_code, 201)

        # Agora tenta atualizar com uma matéria inválida (mais de 100 caracteres)
        resposta_put = requests.put('http://localhost:5000/professores/8', json={
            "id": 8,
            "nome": "João Pedro",
            "idade": "30",
            "materia": "Algoritmos e Programação" * 10,  # 100 caracteres
            "observacoes": ""
        })
        
        self.assertEqual(resposta_put.status_code, 400)
        resposta_json = resposta_put.json()
        self.assertIn("erro", resposta_json)
        self.assertEqual(resposta_json["erro"], 'Formato inválido. Use "DD_MM_YYYY", exemplo 10_10_2020')

    def teste_019_post_observações_sem_ser_string(self):
        reseta_lista = requests.post('http://localhost:5000/reseta')
        self.assertEqual(reseta_lista.status_code, 200)

        resposta = requests.post('http://localhost:5000/professores', json={
            "id": 8,
            "nome": "João Pedro",
            "idade": "30",
            "materia": "Algoritmos e Programação",
            "observacoes": 12345  # Não é uma string
        })

        self.assertEqual(resposta.status_code, 400)
        resposta_json = resposta.json()
        self.assertIn("erro", resposta_json)
        self.assertEqual(resposta_json["erro"], "O campo 'observacoes' deve ser uma string")

    def teste_020_put_observações_sem_ser_string(self):
        reseta_lista = requests.post('http://localhost:5000/reseta')
        self.assertEqual(reseta_lista.status_code, 200)

        # Primeiro cria um professor válido
        resposta_create = requests.post('http://localhost:5000/professores', json={
            "id": 9,
            "nome": "João Pedro",
            "idade": "30",
            "materia": "Algoritmos e Programação",
            "observacoes": "teste"
        })
        self.assertEqual(resposta_create.status_code, 201)

        # Agora tenta atualizar com observações inválidas (não é uma string)
        resposta_put = requests.put('http://localhost:5000/professores/9', json={
            "id": 9,
            "nome": "João Pedro",
            "idade": "30",
            "materia": "Algoritmos e Programação",
            "observacoes": 12345  # Não é uma string
        })

        self.assertEqual(resposta_put.status_code, 400)
        resposta_json = resposta_put.json()
        self.assertIn("erro", resposta_json)
        self.assertEqual(resposta_json["erro"], "O campo 'observacoes' deve ser uma string")

def runTests():
    suite = unittest.defaultTestLoader.loadTestsFromTestCase(TestStringMethods)
    unittest.TextTestRunner(verbosity=2,failfast=True).run(suite)


if __name__ == '__main__':
    runTests()
